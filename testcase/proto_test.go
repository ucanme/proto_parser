package testcase

import (
	"encoding/json"
	"github.com/smartystreets/goconvey/convey"
	"github.com/ucanme/proto_parser/parser"
	"reflect"
	"testing"
)

func TestMarshal2Json(t *testing.T) {
	convey.Convey("TestMarshal2Json", t, func() {
		msgStr := ``
		p, err := parser.Parse([]byte(msgStr))
		convey.So(err, convey.ShouldBeNil)
		m, err := p.Unmarshal2Json("SomeMessageName", []byte{0x0a, 0x02, 0x08, 0x01, 0x0a, 0x02, 0x08, 0x01, 0x0a, 0x02, 0x08, 0x01, 0x0a, 0x02, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x0c, 0x28, 0x01, 0x30, 0x02, 0x38, 0x04, 0x40, 0x05, 0x48, 0x03, 0x50, 0x01, 0x1a, 0x0c, 0x28, 0x08, 0x30, 0x09, 0x38, 0x0b, 0x40, 0x0c, 0x48, 0x0a, 0x50, 0x01, 0x1a, 0x0c, 0x28, 0x0f, 0x30, 0x10, 0x38, 0x12, 0x40, 0x13, 0x48, 0x11, 0x50, 0x01, 0x1a, 0x0c, 0x28, 0x16, 0x30, 0x17, 0x38, 0x19, 0x40, 0x1a, 0x48, 0x18, 0x50, 0x01, 0x22, 0x04, 0x06, 0x0d, 0x14, 0x1b, 0x2a, 0x04, 0x01, 0x02, 0x03, 0x04, 0x32, 0x04, 0x07, 0x0e, 0x15, 0x1c})
		convey.So(err, convey.ShouldBeNil)
		data, err := json.Marshal(m)
		convey.So(err, convey.ShouldBeNil)
		expectJsonStr := `{`
		ok, err := DeepEqualJson(string(data), expectJsonStr)
		convey.So(err, convey.ShouldBeNil)
		convey.So(ok, convey.ShouldBeTrue)

	})
}

func DeepEqualJson(jsonStr1, jsonStr2 string) (ok bool, err error) {
	var (
		json1 interface{}
		json2 interface{}
	)
	if err = json.Unmarshal([]byte(jsonStr1), &json1); err != nil {
		return
	}
	if err = json.Unmarshal([]byte(jsonStr2), &json2); err != nil {
		return
	}
	ok = reflect.DeepEqual(json1, json2)
	return
}
